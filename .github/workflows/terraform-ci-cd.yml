name: Terraform CI/CD Pipeline Dev

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy infrastructure'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: "1.13.0"
  WORKING_DIR: "EA1/ACT1.5"

jobs:
  validate:
    name: Validate and Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v5

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v5
      with:
        tflint_version: latest

    - name: Terraform Format Check
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform fmt -check -recursive

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform init -backend=false

    - name: Terraform Validate
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform validate

    - name: Run TFLint
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        tflint --init
        tflint --format compact

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: ${{ env.WORKING_DIR }}
        output_format: cli
        output_file_path: console

    - name: Generate terraform-docs
      uses: terraform-docs/gh-actions@v1.4.1
      with:
        working-dir: ${{ env.WORKING_DIR }}
        output-file: README.md
        output-method: inject
        git-push: "true"

  plan-and-apply:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    needs: validate
    environment: dev
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v5

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Install Azure CLI and Login
      uses: ./.github/actions/azure-login

    - name: Setup Terraform Workspace
      uses: ./.github/actions/terraform-workspace
      with:
        working-directory: ${{ env.WORKING_DIR }}
        workspace-name: dev

    - name: Terraform Plan
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_USE_CLI: true
      run: |
        echo "Generating Terraform plan..."
        terraform plan -input=false -out=tfplan
        echo "## Terraform Plan" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        terraform show tfplan -no-color >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "Converting Terraform plan to JSON..."
        terraform show -json tfplan > tfplan.json

    - name: Setup OPA
      uses: open-policy-agent/setup-opa@v2
      with:
        version: latest

    - name: Run OPA Policy Evaluation
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        echo "Running OPA policy evaluation..."
        
        # Simple approach - just check for violations and let OPA handle exit codes
        if opa eval -d location_policy.rego -i tfplan.json --fail-defined "data.terraform.azure.location.violations[_]"; then
          echo "OPA policy evaluation passed - no violations found"
          echo "## OPA Policy Evaluation Results" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** PASSED - All resources comply with location policy" >> $GITHUB_STEP_SUMMARY
        else
          echo "OPA policy evaluation failed - violations found"
          echo "## OPA Policy Evaluation Results" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** FAILED - Policy violations detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Violations:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          opa eval -d location_policy.rego -i tfplan.json "data.terraform.azure.location.violations" --format pretty >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Run Checkov against Terraform Plan
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: ${{ env.WORKING_DIR }}
        file: tfplan.json
        output_format: cli
        output_file_path: console
        quiet: true

    - name: Upload Plan as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-dev
        path: |
          ${{ env.WORKING_DIR }}/tfplan
          ${{ env.WORKING_DIR }}/tfplan.json

    - name: Terraform Apply
      if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_USE_CLI: true
      run: |
        echo "Applying Terraform plan..."
        terraform apply tfplan
        echo "Terraform apply completed successfully!"

    - name: Show Terraform Outputs
      if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_USE_CLI: true
      run: |
        terraform output -json > outputs.json
        echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
        cat outputs.json >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'
    needs: plan-and-apply
    environment: dev
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v5

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Install Azure CLI and Login
      uses: ./.github/actions/azure-login

    - name: Setup Terraform Workspace
      uses: ./.github/actions/terraform-workspace
      with:
        working-directory: ${{ env.WORKING_DIR }}
        workspace-name: dev

    - name: Terraform Destroy
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_USE_CLI: true
      run: |
        terraform destroy -input=false -auto-approve
